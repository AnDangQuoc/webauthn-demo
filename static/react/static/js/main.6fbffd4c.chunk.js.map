{"version":3,"sources":["App.js","serviceWorker.js","index.js","webAuthAPI.js","utils.js"],"names":["TabPane","Tabs","layout","labelCol","span","wrapperCol","tailLayout","offset","App","handleRegister","values","username","name","getMakeCredentialsChallenge","then","response","publicKey","preformatMakeCredReq","navigator","credentials","create","makeCredResponse","publicKeyCredentialToJSON","sendWebAuthnResponse","message","success","catch","error","alert","handleLogin","getGetAssertionChallenge","console","log","preformatGetAssertReq","window","get","getAssertionResponse","PublicKeyCredential","global","isUserVerifyingPlatformAuthenticatorAvailable","a","className","type","tab","key","style","display","alignItems","justifyContent","onFinish","this","id","Item","label","rules","required","htmlType","form","React","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister","formBody","fetch","method","headers","body","JSON","stringify","json","status","Error","pubKeyCred","Array","arr","i","push","ArrayBuffer","arraybuffer","chars","lookup","Uint8Array","length","charCodeAt","bytes","len","base64url","substring","Base64Encode","Object","obj","makeCredReq","challenge","Base64Decode","user","getAssert","allowCredentials","allowCred","base64string","encoded1","encoded2","encoded3","encoded4","bufferLength","p","buffer"],"mappings":"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","file":"static/js/main.6fbffd4c.chunk.js","sourcesContent":["import React from \"react\"\nimport { Card, Form, Input, Button, message, Tabs } from \"antd\"\n\nimport {\n  getMakeCredentialsChallenge,\n  sendWebAuthnResponse,\n  getGetAssertionChallenge,\n} from \"./webAuthAPI\"\nimport {\n  preformatMakeCredReq,\n  publicKeyCredentialToJSON,\n  preformatGetAssertReq,\n} from \"./utils\"\n\nconst { TabPane } = Tabs\n\nconst layout = {\n  labelCol: { span: 8 },\n  wrapperCol: { span: 16 },\n}\nconst tailLayout = {\n  wrapperCol: { offset: 8, span: 16 },\n}\n\nclass App extends React.Component {\n  async componentDidMount() {\n    if (!window.PublicKeyCredential) {\n      message.error(\"FCCCCC\")\n\n      if (!global.PublicKeyCredential) {\n        message.error(\"KKKKKKKKK\")\n      }\n      return\n    }\n    const a = await window.PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable()\n    if (!a) {\n      message.error(\"Webauthnn not support\")\n    }\n    console.log(a)\n  }\n\n  handleRegister = (values) => {\n    // event.preventDefault()\n    const { username, name = \"auto\" } = values\n\n    if (!username || !name) {\n      alert(\"Name or username is missing!\")\n      return\n    }\n\n    getMakeCredentialsChallenge({ username, name })\n      .then((response) => {\n        let publicKey = preformatMakeCredReq(response)\n        return navigator.credentials.create({ publicKey })\n      })\n      .then((response) => {\n        let makeCredResponse = publicKeyCredentialToJSON(response)\n        return sendWebAuthnResponse(makeCredResponse)\n      })\n      .then((response) => {\n        message.success(\"ok\")\n        // if (response.status === \"ok\") {\n        //   loadMainContainer()\n        // } else {\n        //   alert(\n        //     `Server responed with error. The message is: ${response.message}`\n        //   )\n        // }\n      })\n      .catch((error) => alert(error))\n  }\n\n  handleLogin = (values) => {\n    let username = values.username\n\n    if (!username) {\n      message.error(\"Username is missing!\")\n      return\n    }\n\n    getGetAssertionChallenge({ username })\n      .then((response) => {\n        console.log(response)\n        let publicKey = preformatGetAssertReq(response)\n        return window.navigator.credentials.get({ publicKey })\n      })\n      .then((response) => {\n        console.log()\n        let getAssertionResponse = publicKeyCredentialToJSON(response)\n        return sendWebAuthnResponse(getAssertionResponse)\n      })\n      .then((response) => {\n        message.success(\"OK\")\n        console.log(response)\n        // if (response.status === \"ok\") {\n        //   loadMainContainer()\n        // } else {\n        //   alert(\n        //     `Server responed with error. The message is: ${response.message}`\n        //   )\n        // }\n      })\n      .catch((error) => alert(error))\n  }\n\n  render() {\n    return (\n      <div className=\"card-container\">\n        <Tabs type=\"card\">\n          <TabPane tab=\"Register\" key=\"1\">\n            <div\n              style={{\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n              }}\n            >\n              <Form\n                onFinish={this.handleRegister}\n                {...layout}\n                id=\"form_register\"\n              >\n                <Form.Item\n                  label=\"User Name\"\n                  name=\"username\"\n                  rules={[\n                    { required: true, message: \"Please input your username!\" },\n                  ]}\n                >\n                  <Input></Input>\n                </Form.Item>\n                <Form.Item\n                  label=\"Name\"\n                  name=\"name\"\n                  rules={[\n                    { required: true, message: \"Please input your name!\" },\n                  ]}\n                >\n                  <Input></Input>\n                </Form.Item>\n                <Form.Item {...tailLayout}>\n                  <Button type=\"primary\" htmlType=\"submit\" form=\"form_register\">\n                    Register\n                  </Button>\n                </Form.Item>\n              </Form>\n            </div>\n          </TabPane>\n          <TabPane tab=\"Login\" key=\"2\">\n            <div\n              style={{\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n              }}\n            >\n              <Form onFinish={this.handleLogin} id=\"form_update\">\n                <Form.Item\n                  label=\"User Name\"\n                  name=\"username\"\n                  rules={[\n                    { required: true, message: \"Please input your username!\" },\n                  ]}\n                >\n                  <Input></Input>\n                </Form.Item>\n                <Form.Item {...tailLayout}>\n                  <Button type=\"primary\" htmlType=\"submit\" form=\"form_update\">\n                    Login\n                  </Button>\n                </Form.Item>\n              </Form>\n            </div>\n          </TabPane>\n        </Tabs>\n      </div>\n    )\n  }\n}\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"antd/dist/antd.css\" // or 'antd/dist/antd.less'\n\nimport \"./index.css\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n  // <React.StrictMode>\n  <App />,\n  // </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import ky from \"ky\"\n\nexport function getMakeCredentialsChallenge(formBody) {\n  return fetch(\"/webauthn/register\", {\n    method: \"POST\",\n    credentials: \"include\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(formBody),\n  })\n    .then((response) => response.json())\n    .then((response) => {\n      if (response.status !== \"ok\")\n        throw new Error(\n          `Server responed with error. The message is: ${response.message}`\n        )\n\n      return response\n    })\n}\n\nexport function sendWebAuthnResponse(body) {\n  return fetch(\"/webauthn/response\", {\n    method: \"POST\",\n    credentials: \"include\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(body),\n  })\n    .then((response) => response.json())\n    .then((response) => {\n      if (response.status !== \"ok\")\n        throw new Error(\n          `Server responed with error. The message is: ${response.message}`\n        )\n\n      return response\n    })\n}\n\nexport function getGetAssertionChallenge(formBody) {\n  return fetch(\"/webauthn/login\", {\n    method: \"POST\",\n    credentials: \"include\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(formBody),\n  })\n    .then((response) => response.json())\n    .then((response) => {\n      if (response.status !== \"ok\")\n        throw new Error(\n          `Server responed with error. The message is: ${response.message}`\n        )\n\n      return response\n    })\n}\n","/**\n * Converts PublicKeyCredential into serialised JSON\n * @param  {Object} pubKeyCred\n * @return {Object}            - JSON encoded publicKeyCredential\n */\nexport function publicKeyCredentialToJSON(pubKeyCred) {\n  if (pubKeyCred instanceof Array) {\n    let arr = []\n    for (let i of pubKeyCred) arr.push(publicKeyCredentialToJSON(i))\n\n    return arr\n  }\n\n  if (pubKeyCred instanceof ArrayBuffer) {\n    return Base64Encode(pubKeyCred)\n  }\n\n  if (pubKeyCred instanceof Object) {\n    let obj = {}\n\n    for (let key in pubKeyCred) {\n      obj[key] = publicKeyCredentialToJSON(pubKeyCred[key])\n    }\n\n    return obj\n  }\n\n  return pubKeyCred\n}\n\n/**\n * Generate secure random buffer\n * @param  {Number} len - Length of the buffer (default 32 bytes)\n * @return {Uint8Array} - random string\n */\nexport function generateRandomBuffer(len) {\n  len = len || 32\n\n  let randomBuffer = new Uint8Array(len)\n  window.crypto.getRandomValues(randomBuffer)\n\n  return randomBuffer\n}\n\n/**\n * Decodes arrayBuffer required fields.\n */\nexport function preformatMakeCredReq(makeCredReq) {\n  makeCredReq.challenge = Base64Decode(makeCredReq.challenge)\n  makeCredReq.user.id = Base64Decode(makeCredReq.user.id)\n\n  return makeCredReq\n}\n\n/**\n * Decodes arrayBuffer required fields.\n */\nexport function preformatGetAssertReq(getAssert) {\n  getAssert.challenge = Base64Decode(getAssert.challenge)\n\n  for (let allowCred of getAssert.allowCredentials) {\n    allowCred.id = Base64Decode(allowCred.id)\n  }\n\n  return getAssert\n}\n\nexport function Base64Encode(arraybuffer) {\n  let chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\"\n\n  // Use a lookup table to find the index.\n  let lookup = new Uint8Array(256)\n  for (let i = 0; i < chars.length; i++) {\n    lookup[chars.charCodeAt(i)] = i\n  }\n\n  let bytes = new Uint8Array(arraybuffer),\n    i,\n    len = bytes.length,\n    base64url = \"\"\n\n  for (i = 0; i < len; i += 3) {\n    base64url += chars[bytes[i] >> 2]\n    base64url += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)]\n    base64url += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)]\n    base64url += chars[bytes[i + 2] & 63]\n  }\n\n  if (len % 3 === 2) {\n    base64url = base64url.substring(0, base64url.length - 1)\n  } else if (len % 3 === 1) {\n    base64url = base64url.substring(0, base64url.length - 2)\n  }\n\n  return base64url\n}\n\nexport function Base64Decode(base64string) {\n  let chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\"\n\n  // Use a lookup table to find the index.\n  let lookup = new Uint8Array(256)\n  for (let i = 0; i < chars.length; i++) {\n    lookup[chars.charCodeAt(i)] = i\n  }\n\n  let bufferLength = base64string.length * 0.75,\n    len = base64string.length,\n    i,\n    p = 0,\n    encoded1,\n    encoded2,\n    encoded3,\n    encoded4\n\n  let bytes = new Uint8Array(bufferLength)\n\n  for (i = 0; i < len; i += 4) {\n    encoded1 = lookup[base64string.charCodeAt(i)]\n    encoded2 = lookup[base64string.charCodeAt(i + 1)]\n    encoded3 = lookup[base64string.charCodeAt(i + 2)]\n    encoded4 = lookup[base64string.charCodeAt(i + 3)]\n\n    bytes[p++] = (encoded1 << 2) | (encoded2 >> 4)\n    bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2)\n    bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63)\n  }\n\n  return bytes.buffer\n}\n"],"sourceRoot":""}