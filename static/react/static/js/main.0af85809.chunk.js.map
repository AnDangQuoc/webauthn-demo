{"version":3,"sources":["App.js","webAuthAPI.js","serviceWorker.js","index.js","utils.js"],"names":["TabPane","Tabs","layout","labelCol","span","wrapperCol","tailLayout","offset","App","state","options","user","response","challenge","getResponse","isUpdate","handleRegister","values","a","username","name","alert","setState","createWebauthConfig","navigator","credentials","create","publicKeyCredentialToJSON","message","error","handleLogin","username2","createWebauthGetConfig","get","response2","jsonBody","jsonTemp","attestationObject","verifyResponse","webauthnResp","success","window","PublicKeyCredential","isUserVerifyingPlatformAuthenticatorAvailable","console","log","displayName","Buffer","alloc","publicKey","rp","id","attestation","pubKeyCredParams","type","alg","authenticatorSelection","authenticatorAttachment","this","allowCredientails","rawId","transports","data","clientData","JSON","parse","base64url","decode","clientDataJSON","toString","authenticatorData","userHandle","className","tab","key","style","display","alignItems","justifyContent","onFinish","Item","label","rules","required","htmlType","form","value","raw","parsed","parseCreateCredentialResponse","parseGetCredentialResponse","React","Component","body","fetch","method","headers","stringify","then","json","status","Error","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister","catch","pubKeyCred","Array","arr","i","push","ArrayBuffer","encode","Object","obj"],"mappings":"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","file":"static/js/main.0af85809.chunk.js","sourcesContent":["import React from \"react\"\nimport { Card, Form, Input, Button, message, Tabs } from \"antd\"\nimport { JsonEditor as Editor } from \"jsoneditor-react\"\nimport \"jsoneditor-react/es/editor.min.css\"\nimport Terminal from \"react-console-emulator\"\n\nimport base64url from \"base64url\"\n\nimport {\n  getMakeCredentialsChallenge,\n  sendWebAuthnResponse,\n  getGetAssertionChallenge,\n  verifyResponse,\n} from \"./webAuthAPI\"\nimport {\n  preformatMakeCredReq,\n  publicKeyCredentialToJSON,\n  preformatGetAssertReq,\n  Base64Decode,\n} from \"./utils\"\n\nconst { TabPane } = Tabs\n\nconst layout = {\n  labelCol: { span: 8 },\n  wrapperCol: { span: 16 },\n}\nconst tailLayout = {\n  wrapperCol: { offset: 8, span: 16 },\n}\n\nclass App extends React.Component {\n  state = {\n    options: {},\n    user: {},\n    response: null,\n    challenge: \"\",\n    getResponse: null,\n    isUpdate: true,\n  }\n  async componentDidMount() {\n    const a = await window.PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable()\n    if (!a) {\n      message.error(\"Webauthnn not support\")\n    }\n    console.log(a)\n  }\n\n  createWebauthConfig(username, displayName) {\n    const challenge = Buffer.alloc(32)\n    const userId = Buffer.alloc(32, 1)\n    const options = {\n      publicKey: {\n        challenge: challenge,\n\n        rp: {\n          name: \"webauthnplay.herokuapp.com\",\n        },\n\n        user: {\n          id: userId,\n          name: username,\n          displayName: displayName,\n        },\n\n        attestation: \"direct\",\n\n        pubKeyCredParams: [\n          {\n            type: \"public-key\",\n            alg: -7, // \"ES256\" IANA COSE Algorithms registry\n          },\n        ],\n        authenticatorSelection: { authenticatorAttachment: \"platform\" },\n      },\n    }\n\n    this.setState({\n      challenge: challenge,\n      user: { id: Buffer.alloc(32), name: username, displayName: displayName },\n      options: options,\n    })\n    return options\n  }\n\n  createWebauthGetConfig() {\n    const { challenge, user, response } = this.state\n    if (response) {\n      return {\n        publicKey: {\n          challenge: challenge,\n          allowCredientails: [\n            {\n              type: \"public-key\",\n              id: response.rawId,\n              transports: [\"internal\"],\n            },\n          ],\n        },\n      }\n    }\n  }\n\n  handleRegister = async (values) => {\n    // event.preventDefault()\n    const { username, name = \"auto\" } = values\n\n    if (!username || !name) {\n      alert(\"Name or username is missing!\")\n      return\n    }\n    this.setState({})\n    const that = this\n\n    const options = this.createWebauthConfig(username, name)\n\n    try {\n      const response = await navigator.credentials.create(options)\n\n      this.setState({ response: publicKeyCredentialToJSON(response) })\n    } catch (error) {\n      message.error(error.message)\n    }\n    // window.navigator.credentials\n    //   .create(options)\n    //   .then((response) => {\n    //     // let makeCredResponse =  publicKeyCredentialToJSON(response)\n    //     console.log(response)\n    //     // that.setState({ response: response })\n    //   })\n    //   .catch((error) => message(error))\n    // getMakeCredentialsChallenge({ username, name })\n    //   .then((response) => {\n    //     let publicKey = preformatMakeCredReq(response)\n    //     that.setState({ options: { publicKey } })\n    //     return window.navigator.credentials.create({ publicKey })\n    //   })\n    //   .then((response) => {\n    //     let makeCredResponse = publicKeyCredentialToJSON(response)\n    //     return sendWebAuthnResponse(makeCredResponse)\n    //   })\n    //   .then((response) => {\n    //     message.success(\"ok\")\n    //     // if (response.status === \"ok\") {\n    //     //   loadMainContainer()\n    //     // } else {\n    //     //   alert(\n    //     //     `Server responed with error. The message is: ${response.message}`\n    //     //   )\n    //     // }\n    //   })\n    //   .catch((error) => alert(error))\n  }\n\n  parseCreateCredentialResponse(data) {\n    const clientData = JSON.parse(\n      base64url.decode(data.response.clientDataJSON)\n    )\n    const attestationObject = base64url.decode(data.response.attestationObject)\n\n    return { clientData, attestationObject: attestationObject.toString(\"utf8\") }\n  }\n\n  parseGetCredentialResponse(data) {\n    const clientData = JSON.parse(\n      base64url.decode(data.response.clientDataJSON)\n    )\n    const authenticatorData = base64url.decode(data.response.authenticatorData)\n    const userHandle = base64url.decode(data.response.userHandle)\n    return { clientData, authenticatorData, userHandle }\n  }\n\n  handleLogin = async (values) => {\n    let username = values.username2\n    const { response } = this.state\n    if (!response) {\n      message.error(\"Not registered\")\n      return\n    }\n\n    if (!username) {\n      message.error(\"Username is missing!\")\n      return\n    }\n\n    const options = this.createWebauthGetConfig()\n\n    try {\n      const response2 = await navigator.credentials.get(options)\n      this.setState({ getResponse: publicKeyCredentialToJSON(response2) })\n\n      const jsonBody = publicKeyCredentialToJSON(response2)\n\n      const jsonTemp = publicKeyCredentialToJSON(response)\n      jsonBody.response.attestationObject = jsonTemp.response.attestationObject\n      const res = await verifyResponse({\n        username: username,\n        webauthnResp: jsonBody,\n      })\n      message.success(\"OK\")\n    } catch (error) {\n      message.error(error.message)\n    }\n\n    // getGetAssertionChallenge({ username })\n    //   .then((response) => {\n    //     console.log(response)\n    //     let publicKey = preformatGetAssertReq(response)\n    //     that.setState({ options: { publicKey } })\n\n    //     return window.\n    //   })\n    //   .then((response) => {\n    //     console.log()\n    //     let getAssertionResponse = publicKeyCredentialToJSON(response)\n    //     return sendWebAuthnResponse(getAssertionResponse)\n    //   })\n    //   .then((response) => {\n    //     message.success(\"OK\")\n    //     console.log(response)\n    //     // if (response.status === \"ok\") {\n    //     //   loadMainContainer()\n    //     // } else {\n    //     //   alert(\n    //     //     `Server responed with error. The message is: ${response.message}`\n    //     //   )\n    //     // }\n    //   })\n    //   .catch((error) => alert(error))\n  }\n  render() {\n    const { options, user, response, challenge, getResponse } = this.state\n    return (\n      <div className=\"card-container\">\n        <Tabs type=\"card\">\n          <TabPane tab=\"Register\" key=\"1\">\n            <div\n              style={{\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n              }}\n            >\n              <Form\n                onFinish={this.handleRegister}\n                {...layout}\n                id=\"form_register\"\n              >\n                <Form.Item\n                  label=\"User Name\"\n                  name=\"username\"\n                  rules={[\n                    { required: true, message: \"Please input your username!\" },\n                  ]}\n                >\n                  <Input></Input>\n                </Form.Item>\n                <Form.Item\n                  label=\"Name\"\n                  name=\"name\"\n                  rules={[\n                    { required: true, message: \"Please input your name!\" },\n                  ]}\n                >\n                  <Input></Input>\n                </Form.Item>\n                <Form.Item {...tailLayout}>\n                  <Button type=\"primary\" htmlType=\"submit\" form=\"form_register\">\n                    Register\n                  </Button>\n                </Form.Item>\n              </Form>\n            </div>\n          </TabPane>\n          <TabPane tab=\"Login\" key=\"2\">\n            <div\n              style={{\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n              }}\n            >\n              <Form onFinish={this.handleLogin} id=\"form_update\">\n                <Form.Item\n                  label=\"User Name\"\n                  name=\"username2\"\n                  rules={[\n                    { required: true, message: \"Please input your username!\" },\n                  ]}\n                >\n                  <Input></Input>\n                </Form.Item>\n                <Form.Item {...tailLayout}>\n                  <Button type=\"primary\" htmlType=\"submit\" form=\"form_update\">\n                    Login\n                  </Button>\n                </Form.Item>\n              </Form>\n            </div>\n          </TabPane>\n        </Tabs>\n        {response ? (\n          <div>\n            {\" \"}\n            <p>Create Credential Response</p> <br></br>\n            <Editor\n              value={{\n                raw: response,\n                parsed: this.parseCreateCredentialResponse(response),\n              }}\n            ></Editor>\n          </div>\n        ) : (\n          <div />\n        )}\n        {getResponse ? (\n          <div>\n            <p>Get Credential Response</p> <br></br>\n            <Editor\n              value={{\n                raw: getResponse,\n                parsed: this.parseGetCredentialResponse(getResponse),\n              }}\n            ></Editor>\n          </div>\n        ) : (\n          <div></div>\n        )}\n      </div>\n    )\n  }\n}\nexport default App\n","import ky from \"ky\"\n\nexport function getMakeCredentialsChallenge(formBody) {\n  return fetch(\"/webauthn/register\", {\n    method: \"POST\",\n    credentials: \"include\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(formBody),\n  })\n    .then((response) => response.json())\n    .then((response) => {\n      if (response.status !== \"ok\")\n        throw new Error(\n          `Server responed with error. The message is: ${response.message}`\n        )\n\n      return response\n    })\n}\n\nexport function verifyResponse(body) {\n  return fetch(\"/webauthn/verify/v2\", {\n    method: \"POST\",\n    credentials: \"include\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(body),\n  })\n    .then((response) => response.json())\n    .then((response) => {\n      if (response.status !== \"ok\")\n        throw new Error(\n          `Server responed with error. The message is: ${response.message}`\n        )\n\n      return response\n    })\n}\n\nexport function getGetAssertionChallenge(formBody) {\n  return fetch(\"/webauthn/login\", {\n    method: \"POST\",\n    credentials: \"include\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(formBody),\n  })\n    .then((response) => response.json())\n    .then((response) => {\n      if (response.status !== \"ok\")\n        throw new Error(\n          `Server responed with error. The message is: ${response.message}`\n        )\n\n      return response\n    })\n}\n\nexport function sendWebAuthnResponse(body) {\n  return fetch(\"/webauthn/response\", {\n    method: \"POST\",\n    credentials: \"include\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(body),\n  })\n    .then((response) => response.json())\n    .then((response) => {\n      if (response.status !== \"ok\")\n        throw new Error(\n          `Server responed with error. The message is: ${response.message}`\n        )\n\n      return response\n    })\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"antd/dist/antd.css\" // or 'antd/dist/antd.less'\n\nimport \"./index.css\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n  // <React.StrictMode>\n  <App />,\n  // </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import base64url from \"base64url\"\n/**\n * Converts PublicKeyCredential into serialised JSON\n * @param  {Object} pubKeyCred\n * @return {Object}            - JSON encoded publicKeyCredential\n */\nexport function publicKeyCredentialToJSON(pubKeyCred) {\n  if (pubKeyCred instanceof Array) {\n    let arr = []\n    for (let i of pubKeyCred) arr.push(publicKeyCredentialToJSON(i))\n\n    return arr\n  }\n\n  if (pubKeyCred instanceof ArrayBuffer) {\n    return base64url.encode(pubKeyCred)\n  }\n\n  if (pubKeyCred instanceof Object) {\n    let obj = {}\n\n    for (let key in pubKeyCred) {\n      obj[key] = publicKeyCredentialToJSON(pubKeyCred[key])\n    }\n\n    return obj\n  }\n\n  return pubKeyCred\n}\n\n/**\n * Generate secure random buffer\n * @param  {Number} len - Length of the buffer (default 32 bytes)\n * @return {Uint8Array} - random string\n */\nexport function generateRandomBuffer(len) {\n  len = len || 32\n\n  let randomBuffer = new Uint8Array(len)\n  window.crypto.getRandomValues(randomBuffer)\n\n  return randomBuffer\n}\n\n/**\n * Decodes arrayBuffer required fields.\n */\nexport function preformatMakeCredReq(makeCredReq) {\n  makeCredReq.challenge = Base64Decode(makeCredReq.challenge)\n  makeCredReq.user.id = Base64Decode(makeCredReq.user.id)\n\n  return makeCredReq\n}\n\n/**\n * Decodes arrayBuffer required fields.\n */\nexport function preformatGetAssertReq(getAssert) {\n  getAssert.challenge = Base64Decode(getAssert.challenge)\n\n  for (let allowCred of getAssert.allowCredentials) {\n    allowCred.id = Base64Decode(allowCred.id)\n  }\n\n  return getAssert\n}\n\nexport function Base64Encode(arraybuffer) {\n  let chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\"\n\n  // Use a lookup table to find the index.\n  let lookup = new Uint8Array(256)\n  for (let i = 0; i < chars.length; i++) {\n    lookup[chars.charCodeAt(i)] = i\n  }\n\n  let bytes = new Uint8Array(arraybuffer),\n    i,\n    len = bytes.length,\n    base64url = \"\"\n\n  for (i = 0; i < len; i += 3) {\n    base64url += chars[bytes[i] >> 2]\n    base64url += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)]\n    base64url += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)]\n    base64url += chars[bytes[i + 2] & 63]\n  }\n\n  if (len % 3 === 2) {\n    base64url = base64url.substring(0, base64url.length - 1)\n  } else if (len % 3 === 1) {\n    base64url = base64url.substring(0, base64url.length - 2)\n  }\n\n  return base64url\n}\n\nexport function Base64Decode(base64string) {\n  let chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\"\n\n  // Use a lookup table to find the index.\n  let lookup = new Uint8Array(256)\n  for (let i = 0; i < chars.length; i++) {\n    lookup[chars.charCodeAt(i)] = i\n  }\n\n  let bufferLength = base64string.length * 0.75,\n    len = base64string.length,\n    i,\n    p = 0,\n    encoded1,\n    encoded2,\n    encoded3,\n    encoded4\n\n  let bytes = new Uint8Array(bufferLength)\n\n  for (i = 0; i < len; i += 4) {\n    encoded1 = lookup[base64string.charCodeAt(i)]\n    encoded2 = lookup[base64string.charCodeAt(i + 1)]\n    encoded3 = lookup[base64string.charCodeAt(i + 2)]\n    encoded4 = lookup[base64string.charCodeAt(i + 3)]\n\n    bytes[p++] = (encoded1 << 2) | (encoded2 >> 4)\n    bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2)\n    bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63)\n  }\n\n  return bytes.buffer\n}\n"],"sourceRoot":""}